<?php
/**
 * AlipayFundAuthOrderFreezeErrorResponseModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Alipay\OpenAPISDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Alipay\OpenAPISDK\Model;

use \ArrayAccess;
use \Alipay\OpenAPISDK\ObjectSerializer;

/**
 * AlipayFundAuthOrderFreezeErrorResponseModel Class Doc Comment
 *
 * @category Class
 * @package  Alipay\OpenAPISDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class AlipayFundAuthOrderFreezeErrorResponseModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AlipayFundAuthOrderFreezeErrorResponseModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'code' => 'string',
        'links' => 'string',
        'message' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'code' => null,
        'links' => null,
        'message' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'code',
        'links' => 'links',
        'message' => 'message'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'links' => 'setLinks',
        'message' => 'setMessage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'links' => 'getLinks',
        'message' => 'getMessage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CODE_ILLEGAL_ARGUMENT = 'ILLEGAL_ARGUMENT';
    public const CODE_EXIST_FORBIDDEN_WORD = 'EXIST_FORBIDDEN_WORD';
    public const CODE_ACCESS_FORBIDDEN = 'ACCESS_FORBIDDEN';
    public const CODE_UNIQUE_VIOLATION = 'UNIQUE_VIOLATION';
    public const CODE_PAYER_USER_STATUS_LIMIT = 'PAYER_USER_STATUS_LIMIT';
    public const CODE_PAYER_NOT_EXIST = 'PAYER_NOT_EXIST';
    public const CODE_PAYMENT_AUTH_CODE_INVALID = 'PAYMENT_AUTH_CODE_INVALID';
    public const CODE_MONEY_NOT_ENOUGH = 'MONEY_NOT_ENOUGH';
    public const CODE_ORDER_ALREADY_CLOSED = 'ORDER_ALREADY_CLOSED';
    public const CODE_FREEZE_ALREADY_SUCCESS = 'FREEZE_ALREADY_SUCCESS';
    public const CODE_ERROR_BALANCE_PAYMENT_DISABLE = 'ERROR_BALANCE_PAYMENT_DISABLE';
    public const CODE_PULL_MOBILE_CASHIER_FAIL = 'PULL_MOBILE_CASHIER_FAIL';
    public const CODE_USER_FACE_PAYMENT_SWITCH_OFF = 'USER_FACE_PAYMENT_SWITCH_OFF';
    public const CODE_SYSTEM_ERROR = 'SYSTEM_ERROR';
    public const CODE_ORDER_ALREADY_FINISH = 'ORDER_ALREADY_FINISH';
    public const CODE_PAYEE_NOT_EXIST = 'PAYEE_NOT_EXIST';
    public const CODE_PAYEE_USER_STATUS_LIMIT = 'PAYEE_USER_STATUS_LIMIT';
    public const CODE_PAYER_PAYEE_EQUAL = 'PAYER_PAYEE_EQUAL';
    public const CODE_NO_PAYMENT_INSTRUMENTS_AVAILABLE = 'NO_PAYMENT_INSTRUMENTS_AVAILABLE';
    public const CODE_CLIENT_VERSION_NOT_MATCH = 'CLIENT_VERSION_NOT_MATCH';
    public const CODE_UNSUPPORT_ORDER_AMOUNT = 'UNSUPPORT_ORDER_AMOUNT';
    public const CODE_FORBIDDEN_MERCHANT_INDUSTRY = 'FORBIDDEN_MERCHANT_INDUSTRY';
    public const CODE_CURRENCY_VERIFICATION_FAIL = 'CURRENCY_VERIFICATION_FAIL';
    public const CODE_RESTRICTED_MERCHANT_INDUSTRY = 'RESTRICTED_MERCHANT_INDUSTRY';
    public const CODE_FOREX_ID_VERIFICATION_FAIL = 'FOREX_ID_VERIFICATION_FAIL';
    public const CODE_PRODUCT_AMOUNT_LIMIT_ERROR = 'PRODUCT_AMOUNT_LIMIT_ERROR';
    public const CODE_SECONDARY_MERCHANT_STATUS_ERROR = 'SECONDARY_MERCHANT_STATUS_ERROR';
    public const CODE_USER_IDENTITY_INFO_VALIDATE_FAIL = 'USER_IDENTITY_INFO_VALIDATE_FAIL';
    public const CODE_USER_ACCOUNT_VALIDATE_FAIL = 'USER_ACCOUNT_VALIDATE_FAIL';
    public const CODE_SUB_MERCHANT_ORGANIZATION_ID_ERROR = 'SUB_MERCHANT_ORGANIZATION_ID_ERROR';
    public const CODE_SUB_MERCHANT_LEVEL_ERROR = 'SUB_MERCHANT_LEVEL_ERROR';
    public const CODE_SUB_MERCHANT_NO_PERMISSION = 'SUB_MERCHANT_NO_PERMISSION';
    public const CODE_MERCHANT_STATUS_ERROR = 'MERCHANT_STATUS_ERROR';
    public const CODE_UNSUPPORTED_BIZ_TYPE = 'UNSUPPORTED_BIZ_TYPE';
    public const CODE_SMILE_PRE_AUTH_ZM_CONSULT_FAIL = 'SMILE_PRE_AUTH_ZM_CONSULT_FAIL';
    public const CODE_USER_BANKCARD_CANCELED = 'USER_BANKCARD_CANCELED';
    public const CODE_USER_BANKCARD_EXPRESS_ERROR = 'USER_BANKCARD_EXPRESS_ERROR';
    public const CODE_USER_BANKCARD_FROZEN = 'USER_BANKCARD_FROZEN';
    public const CODE_USER_BANKCARD_PAY_ERROR = 'USER_BANKCARD_PAY_ERROR';
    public const CODE_USER_BANKCARD_REPORT_LOSS = 'USER_BANKCARD_REPORT_LOSS';
    public const CODE_ILLEGAL_PAYEE_USER_ID = 'ILLEGAL_PAYEE_USER_ID';
    public const CODE_USER_BANKCARD_STATUS_ERROR = 'USER_BANKCARD_STATUS_ERROR';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCodeAllowableValues()
    {
        return [
            self::CODE_ILLEGAL_ARGUMENT,
            self::CODE_EXIST_FORBIDDEN_WORD,
            self::CODE_ACCESS_FORBIDDEN,
            self::CODE_UNIQUE_VIOLATION,
            self::CODE_PAYER_USER_STATUS_LIMIT,
            self::CODE_PAYER_NOT_EXIST,
            self::CODE_PAYMENT_AUTH_CODE_INVALID,
            self::CODE_MONEY_NOT_ENOUGH,
            self::CODE_ORDER_ALREADY_CLOSED,
            self::CODE_FREEZE_ALREADY_SUCCESS,
            self::CODE_ERROR_BALANCE_PAYMENT_DISABLE,
            self::CODE_PULL_MOBILE_CASHIER_FAIL,
            self::CODE_USER_FACE_PAYMENT_SWITCH_OFF,
            self::CODE_SYSTEM_ERROR,
            self::CODE_ORDER_ALREADY_FINISH,
            self::CODE_PAYEE_NOT_EXIST,
            self::CODE_PAYEE_USER_STATUS_LIMIT,
            self::CODE_PAYER_PAYEE_EQUAL,
            self::CODE_NO_PAYMENT_INSTRUMENTS_AVAILABLE,
            self::CODE_CLIENT_VERSION_NOT_MATCH,
            self::CODE_UNSUPPORT_ORDER_AMOUNT,
            self::CODE_FORBIDDEN_MERCHANT_INDUSTRY,
            self::CODE_CURRENCY_VERIFICATION_FAIL,
            self::CODE_RESTRICTED_MERCHANT_INDUSTRY,
            self::CODE_FOREX_ID_VERIFICATION_FAIL,
            self::CODE_PRODUCT_AMOUNT_LIMIT_ERROR,
            self::CODE_SECONDARY_MERCHANT_STATUS_ERROR,
            self::CODE_USER_IDENTITY_INFO_VALIDATE_FAIL,
            self::CODE_USER_ACCOUNT_VALIDATE_FAIL,
            self::CODE_SUB_MERCHANT_ORGANIZATION_ID_ERROR,
            self::CODE_SUB_MERCHANT_LEVEL_ERROR,
            self::CODE_SUB_MERCHANT_NO_PERMISSION,
            self::CODE_MERCHANT_STATUS_ERROR,
            self::CODE_UNSUPPORTED_BIZ_TYPE,
            self::CODE_SMILE_PRE_AUTH_ZM_CONSULT_FAIL,
            self::CODE_USER_BANKCARD_CANCELED,
            self::CODE_USER_BANKCARD_EXPRESS_ERROR,
            self::CODE_USER_BANKCARD_FROZEN,
            self::CODE_USER_BANKCARD_PAY_ERROR,
            self::CODE_USER_BANKCARD_REPORT_LOSS,
            self::CODE_ILLEGAL_PAYEE_USER_ID,
            self::CODE_USER_BANKCARD_STATUS_ERROR,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['code'] = $data['code'] ?? null;
        $this->container['links'] = $data['links'] ?? null;
        $this->container['message'] = $data['message'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        //if ($this->container['code'] === null) {
        //    $invalidProperties[] = "'code' can't be null";
        //}
        $allowedValues = $this->getCodeAllowableValues();
        if (!is_null($this->container['code']) && !in_array($this->container['code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'code', must be one of '%s'",
                $this->container['code'],
                implode("', '", $allowedValues)
            );
        }

        //if ($this->container['message'] === null) {
        //    $invalidProperties[] = "'message' can't be null";
        //}
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code 错误码
     *
     * @return self
     */
    public function setCode($code)
    {
        $allowedValues = $this->getCodeAllowableValues();
        if (!is_null($code) && !in_array($code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'code', must be one of '%s'",
                    $code,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets links
     *
     * @return string|null
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param string|null $links 解决方案链接
     *
     * @return self
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message 错误描述
     *
     * @return self
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


