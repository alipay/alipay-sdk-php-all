<?php
/**
 * DatadigitalFincloudGeneralsaasFaceSourceCertifyModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Alipay\OpenAPISDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Alipay\OpenAPISDK\Model;

use \ArrayAccess;
use \Alipay\OpenAPISDK\ObjectSerializer;

/**
 * DatadigitalFincloudGeneralsaasFaceSourceCertifyModel Class Doc Comment
 *
 * @category Class
 * @package  Alipay\OpenAPISDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class DatadigitalFincloudGeneralsaasFaceSourceCertifyModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DatadigitalFincloudGeneralsaasFaceSourceCertifyModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'certName' => 'string',
        'certNo' => 'string',
        'certType' => 'string',
        'livenessStrategy' => 'string',
        'nation' => 'string',
        'outerBizNo' => 'string',
        'phone' => 'string',
        'reserved' => 'bool',
        'securityStrategy' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'certName' => null,
        'certNo' => null,
        'certType' => null,
        'livenessStrategy' => null,
        'nation' => null,
        'outerBizNo' => null,
        'phone' => null,
        'reserved' => null,
        'securityStrategy' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'certName' => 'cert_name',
        'certNo' => 'cert_no',
        'certType' => 'cert_type',
        'livenessStrategy' => 'liveness_strategy',
        'nation' => 'nation',
        'outerBizNo' => 'outer_biz_no',
        'phone' => 'phone',
        'reserved' => 'reserved',
        'securityStrategy' => 'security_strategy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'certName' => 'setCertName',
        'certNo' => 'setCertNo',
        'certType' => 'setCertType',
        'livenessStrategy' => 'setLivenessStrategy',
        'nation' => 'setNation',
        'outerBizNo' => 'setOuterBizNo',
        'phone' => 'setPhone',
        'reserved' => 'setReserved',
        'securityStrategy' => 'setSecurityStrategy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'certName' => 'getCertName',
        'certNo' => 'getCertNo',
        'certType' => 'getCertType',
        'livenessStrategy' => 'getLivenessStrategy',
        'nation' => 'getNation',
        'outerBizNo' => 'getOuterBizNo',
        'phone' => 'getPhone',
        'reserved' => 'getReserved',
        'securityStrategy' => 'getSecurityStrategy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['certName'] = $data['certName'] ?? null;
        $this->container['certNo'] = $data['certNo'] ?? null;
        $this->container['certType'] = $data['certType'] ?? null;
        $this->container['livenessStrategy'] = $data['livenessStrategy'] ?? null;
        $this->container['nation'] = $data['nation'] ?? null;
        $this->container['outerBizNo'] = $data['outerBizNo'] ?? null;
        $this->container['phone'] = $data['phone'] ?? null;
        $this->container['reserved'] = $data['reserved'] ?? null;
        $this->container['securityStrategy'] = $data['securityStrategy'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets certName
     *
     * @return string|null
     */
    public function getCertName()
    {
        return $this->container['certName'];
    }

    /**
     * Sets certName
     *
     * @param string|null $certName 用户姓名，与身份证上的姓名相匹配
     *
     * @return self
     */
    public function setCertName($certName)
    {
        $this->container['certName'] = $certName;

        return $this;
    }

    /**
     * Gets certNo
     *
     * @return string|null
     */
    public function getCertNo()
    {
        return $this->container['certNo'];
    }

    /**
     * Sets certNo
     *
     * @param string|null $certNo 证件号码，如大陆身份证号码
     *
     * @return self
     */
    public function setCertNo($certNo)
    {
        $this->container['certNo'] = $certNo;

        return $this;
    }

    /**
     * Gets certType
     *
     * @return string|null
     */
    public function getCertType()
    {
        return $this->container['certType'];
    }

    /**
     * Sets certType
     *
     * @param string|null $certType 证件信息类型，大陆身份证：IDENTITY_CARD
     *
     * @return self
     */
    public function setCertType($certType)
    {
        $this->container['certType'] = $certType;

        return $this;
    }

    /**
     * Gets livenessStrategy
     *
     * @return string|null
     */
    public function getLivenessStrategy()
    {
        return $this->container['livenessStrategy'];
    }

    /**
     * Sets livenessStrategy
     *
     * @param string|null $livenessStrategy 活体检测类型，当前枚举支持： OFF：关闭活体检测； CHECK：正常活体检测。 不传默认CHECK。
     *
     * @return self
     */
    public function setLivenessStrategy($livenessStrategy)
    {
        $this->container['livenessStrategy'] = $livenessStrategy;

        return $this;
    }

    /**
     * Gets nation
     *
     * @return string|null
     */
    public function getNation()
    {
        return $this->container['nation'];
    }

    /**
     * Sets nation
     *
     * @param string|null $nation 国家地区代码，当证件类型为外国人永久居留证时必填。
     *
     * @return self
     */
    public function setNation($nation)
    {
        $this->container['nation'] = $nation;

        return $this;
    }

    /**
     * Gets outerBizNo
     *
     * @return string|null
     */
    public function getOuterBizNo()
    {
        return $this->container['outerBizNo'];
    }

    /**
     * Sets outerBizNo
     *
     * @param string|null $outerBizNo 客户业务单据号
     *
     * @return self
     */
    public function setOuterBizNo($outerBizNo)
    {
        $this->container['outerBizNo'] = $outerBizNo;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone 手机号，特殊场景下，在验证过程中需用户输入手机来接受系统发送的安全验证短信。默认不传即可。
     *
     * @return self
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets reserved
     *
     * @return bool|null
     */
    public function getReserved()
    {
        return $this->container['reserved'];
    }

    /**
     * Sets reserved
     *
     * @param bool|null $reserved true：需要留底；false：无需留底。默认留底
     *
     * @return self
     */
    public function setReserved($reserved)
    {
        $this->container['reserved'] = $reserved;

        return $this;
    }

    /**
     * Gets securityStrategy
     *
     * @return string|null
     */
    public function getSecurityStrategy()
    {
        return $this->container['securityStrategy'];
    }

    /**
     * Sets securityStrategy
     *
     * @param string|null $securityStrategy ON：开启安全拦截。OFF：关闭安全拦截。默认取值为ON。
     *
     * @return self
     */
    public function setSecurityStrategy($securityStrategy)
    {
        $this->container['securityStrategy'] = $securityStrategy;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


