<?php
/**
 * AlipayUserTwostageIndirectUseModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Alipay\OpenAPISDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2025-02-19
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Alipay\OpenAPISDK\Model;

use \ArrayAccess;
use \Alipay\OpenAPISDK\ObjectSerializer;

/**
 * AlipayUserTwostageIndirectUseModel Class Doc Comment
 *
 * @category Class
 * @package  Alipay\OpenAPISDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class AlipayUserTwostageIndirectUseModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AlipayUserTwostageIndirectUseModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'dynamicId' => 'string',
        'orgPid' => 'string',
        'paySmid' => 'string',
        'senceNo' => 'string',
        'sourcePid' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'dynamicId' => null,
        'orgPid' => null,
        'paySmid' => null,
        'senceNo' => null,
        'sourcePid' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'dynamicId' => 'dynamic_id',
        'orgPid' => 'org_pid',
        'paySmid' => 'pay_smid',
        'senceNo' => 'sence_no',
        'sourcePid' => 'source_pid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'dynamicId' => 'setDynamicId',
        'orgPid' => 'setOrgPid',
        'paySmid' => 'setPaySmid',
        'senceNo' => 'setSenceNo',
        'sourcePid' => 'setSourcePid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'dynamicId' => 'getDynamicId',
        'orgPid' => 'getOrgPid',
        'paySmid' => 'getPaySmid',
        'senceNo' => 'getSenceNo',
        'sourcePid' => 'getSourcePid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['dynamicId'] = $data['dynamicId'] ?? null;
        $this->container['orgPid'] = $data['orgPid'] ?? null;
        $this->container['paySmid'] = $data['paySmid'] ?? null;
        $this->container['senceNo'] = $data['senceNo'] ?? null;
        $this->container['sourcePid'] = $data['sourcePid'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets dynamicId
     *
     * @return string|null
     */
    public function getDynamicId()
    {
        return $this->container['dynamicId'];
    }

    /**
     * Sets dynamicId
     *
     * @param string|null $dynamicId 商户扫描用户的付款码值。18~24位，25~30开头，例如28开头的18位的数字；或人脸支付的ftoken等。
     *
     * @return self
     */
    public function setDynamicId($dynamicId)
    {
        $this->container['dynamicId'] = $dynamicId;

        return $this;
    }

    /**
     * Gets orgPid
     *
     * @return string|null
     */
    public function getOrgPid()
    {
        return $this->container['orgPid'];
    }

    /**
     * Sets orgPid
     *
     * @param string|null $orgPid 进件信息中，SMID对应的银行机构的PID信息，一般为2088开头的16位数字。
     *
     * @return self
     */
    public function setOrgPid($orgPid)
    {
        $this->container['orgPid'] = $orgPid;

        return $this;
    }

    /**
     * Gets paySmid
     *
     * @return string|null
     */
    public function getPaySmid()
    {
        return $this->container['paySmid'];
    }

    /**
     * Sets paySmid
     *
     * @param string|null $paySmid 进件信息中，二级商户ID（ sub_merchant_id)信息，一般为2088开头的16位数字。
     *
     * @return self
     */
    public function setPaySmid($paySmid)
    {
        $this->container['paySmid'] = $paySmid;

        return $this;
    }

    /**
     * Gets senceNo
     *
     * @return string|null
     */
    public function getSenceNo()
    {
        return $this->container['senceNo'];
    }

    /**
     * Sets senceNo
     *
     * @param string|null $senceNo 外部业务号，用于标识这笔解码请求，对同一个码的重复解码请求，sence_no必须与上一次保持一致，每次请求的sence_no必须不一样，如alipay.user.twostage.common.use接口配合alipay.trade.pay（统一收单交易支付接口）一并使用时，alipay.trade.pay接口的extend_params属性中必须设置DYNAMIC_TOKEN_OUT_BIZ_NO，且值必须与sence_no保持一致
     *
     * @return self
     */
    public function setSenceNo($senceNo)
    {
        $this->container['senceNo'] = $senceNo;

        return $this;
    }

    /**
     * Gets sourcePid
     *
     * @return string|null
     */
    public function getSourcePid()
    {
        return $this->container['sourcePid'];
    }

    /**
     * Sets sourcePid
     *
     * @param string|null $sourcePid 进件信息中，SMID对应渠道的PID信息，一般为2088开头的16位数字。
     *
     * @return self
     */
    public function setSourcePid($sourcePid)
    {
        $this->container['sourcePid'] = $sourcePid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


